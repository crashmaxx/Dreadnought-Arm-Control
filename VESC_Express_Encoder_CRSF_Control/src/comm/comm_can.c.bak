

		case CAN_PACKET_UPDATE_PID_POS_OFFSET: {
			ind = 0;
			float angle_now = buffer_get_float32(data8, 1e4, &ind);
			bool store = data8[ind++];
			mc_interface_update_pid_pos_offset(angle_now, store);
		} break;

		case CAN_PACKET_POLL_ROTOR_POS: {
			uint8_t buffer[4];
			int32_t index = 0;
			buffer_append_int32(buffer, (int32_t)(encoder_read_deg() * 100000.0), &index);
			comm_can_transmit_eid_replace(app_get_configuration()->controller_id |
					((uint32_t)CAN_PACKET_POLL_ROTOR_POS << 8), (uint8_t*)buffer, 4, true, 0);
		} break;

		case CAN_PACKET_SET_POS_KP: {
			ind = 0;
			mc_configuration *mcconf = mempools_alloc_mcconf();
			*mcconf = *mc_interface_get_configuration();
			mcconf->p_pid_kp = buffer_get_float32_auto(data8, &ind);
			mc_interface_set_configuration(mcconf);
			mempools_free_mcconf(mcconf);
		}	break;

		case CAN_PACKET_SET_POS_KI: {
			ind = 0;
			mc_configuration *mcconf = mempools_alloc_mcconf();
			*mcconf = *mc_interface_get_configuration();
			mcconf->p_pid_ki = buffer_get_float32_auto(data8, &ind);
			mc_interface_set_configuration(mcconf);
			mempools_free_mcconf(mcconf);
		}	break;

		case CAN_PACKET_SET_POS_KD: {
			ind = 0;
			mc_configuration *mcconf = mempools_alloc_mcconf();
			*mcconf = *mc_interface_get_configuration();
			mcconf->p_pid_kd = buffer_get_float32_auto(data8, &ind);
			mc_interface_set_configuration(mcconf);
			mempools_free_mcconf(mcconf);
		}	break;

		case CAN_PACKET_SET_POS_FILTER: {
			ind = 0;
			mc_configuration *mcconf = mempools_alloc_mcconf();
			*mcconf = *mc_interface_get_configuration();
			mcconf->p_pid_kd_filter = buffer_get_float32_auto(data8, &ind);
			mc_interface_set_configuration(mcconf);
			mempools_free_mcconf(mcconf);
		}	break;

		case CAN_PACKET_SET_POS_FLOATINGPOINT: {
			ind = 0;
			float pos = buffer_get_float32_auto(data8, &ind);
			if (len >= 8) {
				mc_interface_set_max_sp_vel(buffer_get_float32_auto(data8, &ind));
			}
			mc_interface_set_pid_pos( pos );
			timeout_reset();
		}	break;

		case CAN_PACKET_SET_MAX_SP_VEL: {
			ind = 0;
			mc_interface_set_max_sp_vel(buffer_get_float32_auto(data8, &ind));
		}	break;

		case CAN_PACKET_SET_MAX_SP_ACCEL: {
			ind = 0;
			mc_interface_set_max_sp_accel(buffer_get_float32_auto(data8, &ind));
		}	break;

		case CAN_PACKET_SET_MAX_SP_DECEL: {
			ind = 0;
			mc_interface_set_max_sp_decel(buffer_get_float32_auto(data8, &ind));
		}	break;

		case CAN_PACKET_SET_CURRENT_PID_POS: {
			ind = 0;
			float pos = buffer_get_float32_auto(data8, &ind);
			bool store = data8[ind++];
			mc_interface_update_pid_pos_offset(pos, store);
		} break;

		default:
			break;
		}
	}

	
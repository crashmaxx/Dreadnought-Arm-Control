/*
	Copyright 2025

	This file is part of the VESC firmware.

	The VESC firmware is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    The VESC firmware is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "encoder_interface.h"

#if ENCODER_TYPE == ENCODER_TYPE_QUADRATURE

#include "driver/gpio.h"
#include "driver/pcnt.h"
#include "esp_log.h"
#include "esp_timer.h"
#include "esp_attr.h"

static const char *TAG = "QUAD_ENCODER";

// Quadrature encoder state
typedef struct {
    float angle_rad;
    float angle_deg;
    float velocity_rad_s;
    float velocity_deg_s;
    int32_t pulse_count;
    int32_t last_pulse_count;
    uint32_t timestamp_us;
    uint32_t last_update_us;
    bool valid;
    uint32_t error_count;
    float radians_per_pulse;
} quad_encoder_state_t;

static quad_encoder_state_t quad_state = {0};

#define PCNT_UNIT PCNT_UNIT_0
#define PCNT_H_LIM_VAL 32767
#define PCNT_L_LIM_VAL -32768
#define VELOCITY_FILTER_ALPHA 0.1f

// PCNT overflow/underflow handler
static void IRAM_ATTR pcnt_intr_handler(void *arg) {
    uint32_t intr_status = PCNT.int_st.val;
    
    if (intr_status & (BIT(PCNT_UNIT))) {
        if (PCNT.status_unit[PCNT_UNIT].h_lim_lat) {
            // High limit reached
            quad_state.pulse_count += PCNT_H_LIM_VAL;
        }
        if (PCNT.status_unit[PCNT_UNIT].l_lim_lat) {
            // Low limit reached  
            quad_state.pulse_count += PCNT_L_LIM_VAL;
        }
        PCNT.int_clr.val = BIT(PCNT_UNIT);
    }
}

// Initialize quadrature encoder
static bool quad_encoder_init(void) {
    ESP_LOGI(TAG, "Initializing quadrature encoder on GPIO %d/%d (PPR: %d)", 
             ENCODER_A_PIN, ENCODER_B_PIN, ENCODER_PPR);
    
    // Calculate radians per pulse (4x encoding: 4 edges per line)
    quad_state.radians_per_pulse = (2.0f * M_PI) / (ENCODER_PPR * 4.0f);
    
    // Configure PCNT unit
    pcnt_config_t pcnt_config = {
        .pulse_gpio_num = ENCODER_A_PIN,
        .ctrl_gpio_num = ENCODER_B_PIN,
        .channel = PCNT_CHANNEL_0,
        .unit = PCNT_UNIT,
        .pos_mode = PCNT_COUNT_INC,    // Count up on positive edge
        .neg_mode = PCNT_COUNT_DIS,    // Don't count on negative edge
        .lctrl_mode = PCNT_MODE_REVERSE, // Reverse when control signal is low
        .hctrl_mode = PCNT_MODE_KEEP,    // Keep when control signal is high
        .counter_h_lim = PCNT_H_LIM_VAL,
        .counter_l_lim = PCNT_L_LIM_VAL,
    };
    
    esp_err_t ret = pcnt_unit_config(&pcnt_config);
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "PCNT unit config failed: %s", esp_err_to_name(ret));
        return false;
    }
    
    // Configure PCNT channel 1 for quadrature decoding
    pcnt_config.pulse_gpio_num = ENCODER_B_PIN;
    pcnt_config.ctrl_gpio_num = ENCODER_A_PIN;
    pcnt_config.channel = PCNT_CHANNEL_1;
    pcnt_config.pos_mode = PCNT_COUNT_DEC;    // Count down on positive edge
    pcnt_config.lctrl_mode = PCNT_MODE_KEEP;  // Keep when control signal is low
    pcnt_config.hctrl_mode = PCNT_MODE_REVERSE; // Reverse when control signal is high
    
    ret = pcnt_unit_config(&pcnt_config);
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "PCNT channel 1 config failed: %s", esp_err_to_name(ret));
        return false;
    }
    
    // Set GPIO pull-ups
    gpio_set_pull_mode(ENCODER_A_PIN, GPIO_PULLUP_ONLY);
    gpio_set_pull_mode(ENCODER_B_PIN, GPIO_PULLUP_ONLY);
    
    // Set up overflow/underflow interrupts
    ret = pcnt_event_enable(PCNT_UNIT, PCNT_EVT_H_LIM);
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "PCNT enable H_LIM event failed: %s", esp_err_to_name(ret));
        return false;
    }
    
    ret = pcnt_event_enable(PCNT_UNIT, PCNT_EVT_L_LIM);
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "PCNT enable L_LIM event failed: %s", esp_err_to_name(ret));
        return false;
    }
    
    ret = pcnt_isr_register(pcnt_intr_handler, NULL, 0, NULL);
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "PCNT ISR register failed: %s", esp_err_to_name(ret));
        return false;
    }
    
    ret = pcnt_intr_enable(PCNT_UNIT);
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "PCNT interrupt enable failed: %s", esp_err_to_name(ret));
        return false;
    }
    
    // Initialize and start counter
    ret = pcnt_counter_pause(PCNT_UNIT);
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "PCNT counter pause failed: %s", esp_err_to_name(ret));
        return false;
    }
    
    ret = pcnt_counter_clear(PCNT_UNIT);
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "PCNT counter clear failed: %s", esp_err_to_name(ret));
        return false;
    }
    
    ret = pcnt_counter_resume(PCNT_UNIT);
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "PCNT counter resume failed: %s", esp_err_to_name(ret));
        return false;
    }
    
    // Initialize state
    quad_state.pulse_count = 0;
    quad_state.last_pulse_count = 0;
    quad_state.valid = true;
    quad_state.error_count = 0;
    quad_state.last_update_us = esp_timer_get_time();
    
    ESP_LOGI(TAG, "Quadrature encoder initialized successfully");
    return true;
}

// Update quadrature encoder data
static bool quad_encoder_update(void) {
    uint32_t current_time_us = esp_timer_get_time();
    int16_t pcnt_count;
    
    // Read current pulse count from PCNT
    esp_err_t ret = pcnt_get_counter_value(PCNT_UNIT, &pcnt_count);
    if (ret != ESP_OK) {
        quad_state.error_count++;
        return false;
    }
    
    // Add PCNT count to our accumulated count
    int32_t total_count = quad_state.pulse_count + pcnt_count;
    
    // Calculate angle
    quad_state.angle_rad = total_count * quad_state.radians_per_pulse;
    quad_state.angle_deg = encoder_rad_to_deg(quad_state.angle_rad);
    
    // Calculate velocity
    uint32_t dt_us = current_time_us - quad_state.last_update_us;
    if (dt_us > 0 && quad_state.last_update_us > 0) {
        float dt_s = dt_us / 1000000.0f;
        int32_t count_diff = total_count - quad_state.last_pulse_count;
        float angle_diff = count_diff * quad_state.radians_per_pulse;
        
        float inst_velocity = angle_diff / dt_s;
        
        // Low-pass filter for velocity
        quad_state.velocity_rad_s = VELOCITY_FILTER_ALPHA * inst_velocity + 
                                   (1.0f - VELOCITY_FILTER_ALPHA) * quad_state.velocity_rad_s;
        quad_state.velocity_deg_s = encoder_rad_to_deg(quad_state.velocity_rad_s);
    }
    
    quad_state.last_pulse_count = total_count;
    quad_state.last_update_us = current_time_us;
    quad_state.timestamp_us = current_time_us;
    
    // Update global encoder data
    encoder_data.angle_rad = quad_state.angle_rad;
    encoder_data.angle_deg = quad_state.angle_deg;
    encoder_data.velocity_rad_s = quad_state.velocity_rad_s;
    encoder_data.velocity_deg_s = quad_state.velocity_deg_s;
    encoder_data.timestamp_us = current_time_us;
    encoder_data.valid = quad_state.valid;
    encoder_data.error_count = quad_state.error_count;
    
    return true;
}

// Get angle in radians
static float quad_encoder_get_angle_rad(void) {
    return quad_state.angle_rad;
}

// Get angle in degrees
static float quad_encoder_get_angle_deg(void) {
    return quad_state.angle_deg;
}

// Get velocity in rad/s
static float quad_encoder_get_velocity_rad_s(void) {
    return quad_state.velocity_rad_s;
}

// Get velocity in deg/s
static float quad_encoder_get_velocity_deg_s(void) {
    return quad_state.velocity_deg_s;
}

// Check if data is valid
static bool quad_encoder_is_valid(void) {
    return quad_state.valid;
}

// Get error count
static uint32_t quad_encoder_get_error_count(void) {
    return quad_state.error_count;
}

// Reset error count
static void quad_encoder_reset_errors(void) {
    quad_state.error_count = 0;
}

// Get encoder type name
static const char* quad_encoder_get_type_name(void) {
    return "Quadrature";
}

// Quadrature encoder interface
const encoder_interface_t quadrature_encoder_interface = {
    .init = quad_encoder_init,
    .update = quad_encoder_update,
    .get_angle_rad = quad_encoder_get_angle_rad,
    .get_angle_deg = quad_encoder_get_angle_deg,
    .get_velocity_rad_s = quad_encoder_get_velocity_rad_s,
    .get_velocity_deg_s = quad_encoder_get_velocity_deg_s,
    .is_valid = quad_encoder_is_valid,
    .get_error_count = quad_encoder_get_error_count,
    .reset_errors = quad_encoder_reset_errors,
    .get_type_name = quad_encoder_get_type_name
};

#endif /* ENCODER_TYPE == ENCODER_TYPE_QUADRATURE */
